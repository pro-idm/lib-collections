#Область СостояниеЛексическогоАнализатора
// Состояния лексического анализатора:
//  1 - Начало токена
//  2 - Идентификатор
//  3 - Пробелы
//  4 - Односимвольный токен
//  5 - Строка
//  0 - Неизвестный токен
// -1 - Конец кода

#КонецОбласти //СостояниеЛексическогоАнализатора

#Область СостояниеСинтаксическогоАнализатора
// Состояния синтаксического анализатора
// 1 - Начало выражения
// 2 - Правая часть выражения
// 3 - После точки
// 4 - После ключевого слова "Новый"

Перем СА_Состояние;
Перем СА_Токены;
Перем СА_Позиция;
Перем СА_Переменные;
Перем СА_КлючевыеСлова;
Перем СА_ПозицияВыражения;

#КонецОбласти //СостояниеСинтаксическогоАнализатора

#Область ТипыТокенов
// Типы токенов:
// Неизвестный - 0
// ЛеваяСкобка - 1
// ПраваяСкобка - 2
// Точка - 3
// Равно - 4
// ТочкаСЗапятой - 5
// Идентификатор - 6
// Пробелы - 7
// Строка - 8
// КлючевоеСлово - 9
// Функция - 10
// Параметр - 11
// Переменная - 12
// Поле - 13
#КонецОбласти

#Область ЛексическийАнализатор

Функция ЛексическийАнализ(Знач Код) Экспорт
	Состояние = 1;
	Позиция = 1;
	Токены = Новый Массив;
	Значение = "";
	
	Пока Истина Цикл
		Если Состояние = 1 Тогда
			ОбработатьНачалоТокена(Код, Состояние, Позиция, Значение);
		ИначеЕсли Состояние = 2 Тогда
			ОбработатьИдентификатор(Код, Состояние, Позиция, Токены, Значение);
		ИначеЕсли Состояние = 3 Тогда
			ОбработатьПробелы(Код, Состояние, Позиция, Токены, Значение);
		ИначеЕсли Состояние = 4 Тогда
			ОбработатьОдносимвольныйТокен(Код, Состояние, Позиция, Токены);
		ИначеЕсли Состояние = 5 Тогда
			ОбработатьСтрока(Код, Состояние, Позиция, Токены, Значение);
		ИначеЕсли Состояние = 0 Тогда
			ОбработатьНеизвестныйТокен(Код, Состояние, Позиция, Токены, Значение);
		ИначеЕсли Состояние = -1 Тогда
			Прервать;
		Иначе
			ВызватьИсключение "Неизвестное состояние: " + Состояние;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Токены;
КонецФункции

Процедура ОбработатьНачалоТокена(Код, Состояние, Позиция, Значение)
	Символ = ПрочитатьСимвол(Код, Позиция);
	
	Если Символ = "" Тогда
		Состояние = -1;
	ИначеЕсли ЭтоПробел(Символ) Тогда
		Значение = Символ;
		Состояние = 3;
	ИначеЕсли ЭтоОдносимвольныйТокен(Символ) Тогда
		Состояние = 4;
	ИначеЕсли ЭтоНачалоИдентификатора(Символ) Тогда
		Значение = Символ;
		Состояние = 2;
	ИначеЕсли ЭтоСтрока(Символ) Тогда
		Значение = Символ;
		Состояние = 5;
	Иначе
		Значение = Символ;
		Состояние = 0;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьПробелы(Код, Состояние, Позиция, Токены, Значение)
	Позиция = Позиция + 1;
	Символ = ПрочитатьСимвол(Код, Позиция);
	Если Символ <> "" И ЭтоПробел(Символ) Тогда
		Значение = Значение + Символ;
	Иначе		
		Токены.Добавить(Токен(7, Значение));
		Состояние = 1;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьОдносимвольныйТокен(Код, Состояние, Позиция, Токены)
	Символ = ПрочитатьСимвол(Код, Позиция);
	
	ТипТокена = "";
	Если Символ = "(" Тогда
		ТипТокена = 1;
	ИначеЕсли Символ = ")" Тогда 
		ТипТокена = 2;
	ИначеЕсли Символ = "." Тогда 
		ТипТокена = 3;
	ИначеЕсли Символ = "=" Тогда 
		ТипТокена = 4;
	ИначеЕсли Символ = ";" Тогда 
		ТипТокена = 5;
	Иначе
		ВызватьИсключение "Неизвестный односимвольный токен: " + Символ; 
	КонецЕсли; 
	
	Токены.Добавить(Токен(ТипТокена, Символ));
	Позиция = Позиция + 1;
	Состояние = 1;
КонецПроцедуры

Процедура ОбработатьИдентификатор(Код, Состояние, Позиция, Токены, Значение)
	Позиция = Позиция + 1;
	Символ = ПрочитатьСимвол(Код, Позиция);
	Если Символ <> "" И ЭтоСимволИдентификатора(Символ) Тогда
		Значение = Значение + Символ;
	Иначе
		Токены.Добавить(Токен(6, Значение));
		Состояние = 1;
	КонецЕсли; 	
КонецПроцедуры

Процедура ОбработатьСтрока(Код, Состояние, Позиция, Токены, Значение)
	Позиция = Позиция + 1;
	Символ = ПрочитатьСимвол(Код, Позиция);
	Если Символ <> "" И Не ЭтоСтрока(Символ) Тогда
		Значение = Значение + Символ;
	Иначе		
		Значение = Значение + Символ;
		Токены.Добавить(Токен(8, Значение));
		
		Позиция = Позиция + 1;
		Состояние = 1;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьНеизвестныйТокен(Код, Состояние, Позиция, Токены, Значение)
	Позиция = Позиция + 1;
	Символ = ПрочитатьСимвол(Код, Позиция);
	Если Символ <> "" И Не ЭтоПробел(Символ) И Не ЭтоНачалоИдентификатора(Символ)
		 И Не ЭтоОдносимвольныйТокен(Символ) И Не ЭтоСтрока(Символ) Тогда
		Значение = Значение + Символ;
	Иначе		
		Токены.Добавить(Токен(0, Значение));
		Состояние = 1;
	КонецЕсли;
КонецПроцедуры

Функция Токен(Тип, Значение)
	Возврат Новый Структура("Тип, Значение", Тип, Значение);
КонецФункции

Функция ЭтоЦифра(Символ)
	Возврат Найти("1234567890", Символ) > 0;
КонецФункции

Функция ЭтоБуква(Символ)
	Возврат Найти("абвгдеёжзийклмнопрстуфхцчшщъыьэюяabcdefghijklmnopqrstuvwxyz", НРег(Символ)) > 0;
КонецФункции

Функция ЭтоПробел(Символ)
	Возврат Символ = " " Или Символ = Символы.ПС Или Символ = Символы.Таб;
КонецФункции 

Функция ЭтоСтрока(Символ)
	Возврат Символ = """";
КонецФункции

Функция ЭтоНачалоИдентификатора(Символ)
	Возврат ЭтоБуква(Символ) Или Символ = "_";
КонецФункции

Функция ЭтоСимволИдентификатора(Символ)
	Возврат ЭтоБуква(Символ) Или ЭтоЦифра(Символ) Или Символ = "_";
КонецФункции 

Функция ЭтоОдносимвольныйТокен(Символ)
	Возврат Найти("().=;", Символ);
КонецФункции 

Функция ПрочитатьСимвол(Код, Позиция)
	Если Позиция > СтрДлина(Код) Тогда
		Возврат "";
	Иначе
		Возврат Сред(Код, Позиция, 1);
	КонецЕсли;	
КонецФункции 

#КонецОбласти //ЛексическийАнализатор

#Область СинтаксическийАнализатор

Процедура СинтаксическийАнализ(Токены, Параметры) Экспорт
	СА_Переменные = Новый Массив;
	СА_Состояние = 1;
	СА_Токены = Токены;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Параметры", Параметры);
	
	ТокеныВГраница = Токены.ВГраница();
	Для СА_Позиция = 0 По ТокеныВГраница Цикл
		ТекущийТокен = Токены[СА_Позиция];
		
		Если ТекущийТокен.Тип = 7 Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СА_Состояние = 1 Тогда
			СА_ПозицияВыражения = СА_Позиция;
			ОбработатьВыражение(Контекст, ТекущийТокен, Токены);
		ИначеЕсли СА_Состояние = 2 Тогда
			ОбработатьВыражение(Контекст, ТекущийТокен, Токены, Ложь);
		ИначеЕсли СА_Состояние = 3 Тогда
			ОбработатьПослеТочки(ТекущийТокен, Токены);
		ИначеЕсли СА_Состояние = 4 Тогда
			ОбработатьПослеНовый(ТекущийТокен, Токены);
		Иначе
			ВызватьИсключение "Неизвестное состояние: " + СА_Состояние;
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьВыражение(Контекст, ТекущийТокен, Токены, ЛеваяЧасть = Истина)
	Если ТекущийТокен.Тип = 6 Тогда
		Если ЭтоКлючевоеСлово(ТекущийТокен.Значение) Тогда
			ТекущийТокен.Тип = 9;
			Если ЭтоКлючевоеСловоСВложеннымВыражением(ТекущийТокен.Значение) Тогда
				СА_Состояние = 1;
			ИначеЕсли ЭтоКлючевоеСловоНовый(ТекущийТокен.Значение) Тогда
				СА_Состояние = 4;			
			Иначе
				СА_Состояние = 2;
			КонецЕсли; 
		ИначеЕсли ПроверитьТипСледующегоТокена(Токены, СА_Позиция + 1 , 1) Тогда
			ТекущийТокен.Тип = 10;
			СА_Состояние = 2;
		ИначеЕсли ЭтоПараметр(Контекст, ТекущийТокен) Тогда
			ТекущийТокен.Тип = 11;
			СА_Состояние = 2;
		ИначеЕсли ЭтоПеременная(ТекущийТокен.Значение) Тогда 
			ТекущийТокен.Тип = 12;
			СА_Состояние = 2;
		ИначеЕсли ПроверитьТипСледующегоТокена(Токены, СА_Позиция + 1 , 4) И ЛеваяЧасть Тогда
			ТекущийТокен.Тип = 12;
			СА_Переменные.Добавить(ТекущийТокен.Значение);
			СА_Состояние = 2;
		Иначе
			СА_Состояние = 2;
		КонецЕсли;
	ИначеЕсли ТекущийТокен.Тип = 3 Тогда 
		СА_Состояние = 3;
	ИначеЕсли ТекущийТокен.Тип = 5 Тогда 
		СА_Состояние = 1;
	Иначе
		СА_Состояние = 2;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьПослеТочки(ТекущийТокен, Токены)
	Если ТекущийТокен.Тип = 6 Тогда
		Если ПроверитьТипСледующегоТокена(Токены, СА_Позиция + 1 , 1) Тогда
			ТекущийТокен.Тип = 10;
		Иначе
			ТекущийТокен.Тип = 13;
		КонецЕсли;
	КонецЕсли;
	СА_Состояние = 2;	
КонецПроцедуры

Процедура ОбработатьПослеНовый(ТекущийТокен, Токены)
	Если ТекущийТокен.Тип = 6 Тогда
		ТекущийТокен.Тип = 10;
	КонецЕсли;
	
	СА_Состояние = 2;
КонецПроцедуры

Функция ПроверитьТипСледующегоТокена(Токены, Позиция, Тип)
	Результат = Ложь;
	Для ТекПозиция = Позиция По Токены.ВГраница() Цикл
		Токен = Токены[ТекПозиция];
		Если Токен.Тип <> 7 Тогда
			Результат = Токен.Тип = Тип;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции 

Функция ПолучитьКлючевыеСлова()
	СА_КлючевыеСлова = Новый Массив;
	СА_КлючевыеСлова.Добавить("новый");
	СА_КлючевыеСлова.Добавить("неопределено");	
	СА_КлючевыеСлова.Добавить("null");
	СА_КлючевыеСлова.Добавить("истина");
	СА_КлючевыеСлова.Добавить("ложь");
	СА_КлючевыеСлова.Добавить("и");
	СА_КлючевыеСлова.Добавить("или");
	СА_КлючевыеСлова.Добавить("не");
	СА_КлючевыеСлова.Добавить("если");
	СА_КлючевыеСлова.Добавить("тогда");
	СА_КлючевыеСлова.Добавить("иначеесли");
	СА_КлючевыеСлова.Добавить("иначе");
	СА_КлючевыеСлова.Добавить("конецесли");
	СА_КлючевыеСлова.Добавить("пока");
	СА_КлючевыеСлова.Добавить("для");
	СА_КлючевыеСлова.Добавить("по");
	СА_КлючевыеСлова.Добавить("каждого");
	СА_КлючевыеСлова.Добавить("цикл");
	СА_КлючевыеСлова.Добавить("прервать");
	СА_КлючевыеСлова.Добавить("продолжить");
	СА_КлючевыеСлова.Добавить("конеццикла");
	СА_КлючевыеСлова.Добавить("вызватьисключение");

	Возврат СА_КлючевыеСлова;
КонецФункции 

Функция ЭтоКлючевоеСлово(Значение)
	Возврат СА_КлючевыеСлова.Найти(НРег(Значение)) <> Неопределено;
КонецФункции

Функция ЭтоПараметр(Контекст, ТекущийТокен)
	Возврат Контекст.Параметры.Найти(ТекущийТокен.Значение) <> Неопределено;
КонецФункции

Функция ЭтоПеременная(Значение);
	Возврат СА_Переменные.Найти(Значение) <> Неопределено;
КонецФункции

Функция ЭтоКлючевоеСловоСВложеннымВыражением(Значение)
	КлючевоеСлово = НРег(Значение);
	Возврат КлючевоеСлово = "тогда" Или КлючевоеСлово = "иначе"
				 Или КлючевоеСлово = "цикл" Или КлючевоеСлово = "для";
КонецФункции

Функция ЭтоКлючевоеСловоНовый(Значение)
	Возврат НРег(Значение) = "новый";
КонецФункции
 
#КонецОбласти //СинтаксическийАнализатор

#Область ОбработкаКода

Функция ДобавитьПолучениеРезультата(Код, ПеременнаяРезультат) Экспорт
	Токены = ЛексическийАнализ(Код);
	СинтаксическийАнализ(Токены, Новый Массив);
	ДобавитьПрисвоениеРезультата(Токены, ПеременнаяРезультат);
	
	Возврат ПолучитьКод(Токены);
КонецФункции

Функция ПодготовитьКодДляВстраивания(Код, Замены, Префикс = "", ПеременнаяРезультат = "") Экспорт
	Параметры = ПолучитьКлючиСтруктуры(Замены);
	
	Токены = ЛексическийАнализ(Код);
	СинтаксическийАнализ(Токены, Параметры);
	
	Для Каждого Токен Из Токены Цикл
		Если Токен.Тип = 11 Тогда
			Токен.Значение = Замены[Токен.Значение];
		ИначеЕсли Токен.Тип = 12 И Не ПустаяСтрока(Префикс) Тогда
			Токен.Значение = Префикс + "_" + Токен.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ПеременнаяРезультат) Тогда
		ДобавитьПрисвоениеРезультата(Токены, ПеременнаяРезультат);
	КонецЕсли; 
	
	ЗакончитьВыражениеЕслиНеобходимо(Токены);
	
	Возврат ПолучитьКод(Токены);
КонецФункции

Процедура ЗакончитьВыражениеЕслиНеобходимо(Токены)
	Если ПолучитьТипПервогоТокенаСКонца(Токены) <> 5 Тогда
		Токены.Добавить(Токен(5, ";"));
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТипПервогоТокенаСКонца(Токены)
	Тип = Неопределено;
	
	ТекПозиция = Токены.ВГраница();
	Пока ТекПозиция >= 0 Цикл
		Токен = Токены[ТекПозиция];
		Если Токен.Тип <> 7 Тогда
			Тип = Токен.Тип;
			Прервать;
		КонецЕсли;
		ТекПозиция = ТекПозиция - 1;
	КонецЦикла;
	
	Возврат Тип;
КонецФункции

Процедура ДобавитьПрисвоениеРезультата(Токены, ПеременнаяРезультат)
	Токены.Вставить(СА_ПозицияВыражения, Токен(4, "="));
	Токены.Вставить(СА_ПозицияВыражения, Токен(12, ПеременнаяРезультат));
КонецПроцедуры
  
Функция ПолучитьКод(Токены)
	Код = "";
	Для Каждого Токен Из Токены Цикл
		Код = Код + Токен.Значение;
	КонецЦикла; 
	
	Возврат Код;
КонецФункции

Функция ПолучитьКлючиСтруктуры(Структура)
	Ключи = Новый Массив;
	Для Каждого КлючЗначение Из Структура Цикл
		Ключи.Добавить(КлючЗначение.Ключ);
	КонецЦикла; 
	
	Возврат Ключи;
КонецФункции
 
#КонецОбласти //ОбработкаКода

#Область Инициализация

СА_КлючевыеСлова = ПолучитьКлючевыеСлова();

#КонецОбласти //Инициализация